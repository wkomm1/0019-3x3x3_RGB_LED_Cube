;--------------------------------------------------------
; File Created by SDCC : free open source ANSI-C Compiler
; Version 3.5.5 #9582 (MINGW64)
;--------------------------------------------------------
; PIC16 port for the Microchip 16-bit core micros
;--------------------------------------------------------
	list	p=18f2520
	radix	dec
	__config 0x300001, 0x08
	__config 0x300003, 0x1e
	__config 0x300005, 0x03
	__config 0x300006, 0x81
	__config 0x300009, 0xc0
	__config 0x30000b, 0xe0
	__config 0x30000d, 0x40


;--------------------------------------------------------
; public variables in this module
;--------------------------------------------------------
	global	_redData
	global	_blueData
	global	_greenData
	global	_i
	global	_j
	global	_k
	global	_l
	global	_pointer
	global	_workingVar
	global	_delay_us
	global	_delay_ms
	global	_allOff
	global	_colorSet
	global	_columbSet
	global	_displayFrame
	global	_renderFrame
	global	_randomPixle
	global	_helixGreen
	global	_rgbUpDown
	global	_usaFlash
	global	_snake
	global	_main
	global	_delaySpeed

;--------------------------------------------------------
; extern variables in this module
;--------------------------------------------------------
	extern	_PORTAbits
	extern	_PORTBbits
	extern	_PORTCbits
	extern	_PORTEbits
	extern	_LATAbits
	extern	_LATBbits
	extern	_LATCbits
	extern	_DDRAbits
	extern	_TRISAbits
	extern	_DDRBbits
	extern	_TRISBbits
	extern	_DDRCbits
	extern	_TRISCbits
	extern	_OSCTUNEbits
	extern	_PIE1bits
	extern	_PIR1bits
	extern	_IPR1bits
	extern	_PIE2bits
	extern	_PIR2bits
	extern	_IPR2bits
	extern	_EECON1bits
	extern	_RCSTAbits
	extern	_TXSTAbits
	extern	_T3CONbits
	extern	_CMCONbits
	extern	_CVRCONbits
	extern	_ECCP1ASbits
	extern	_ECCPASbits
	extern	_ECCP1DELbits
	extern	_PWM1CONbits
	extern	_BAUDCONbits
	extern	_BAUDCTLbits
	extern	_CCP2CONbits
	extern	_CCP1CONbits
	extern	_ADCON2bits
	extern	_ADCON1bits
	extern	_ADCON0bits
	extern	_SSPCON2bits
	extern	_SSPCON1bits
	extern	_SSPSTATbits
	extern	_T2CONbits
	extern	_T1CONbits
	extern	_RCONbits
	extern	_WDTCONbits
	extern	_HLVDCONbits
	extern	_LVDCONbits
	extern	_OSCCONbits
	extern	_T0CONbits
	extern	_STATUSbits
	extern	_INTCON3bits
	extern	_INTCON2bits
	extern	_INTCONbits
	extern	_STKPTRbits
	extern	_PORTA
	extern	_PORTB
	extern	_PORTC
	extern	_PORTE
	extern	_LATA
	extern	_LATB
	extern	_LATC
	extern	_DDRA
	extern	_TRISA
	extern	_DDRB
	extern	_TRISB
	extern	_DDRC
	extern	_TRISC
	extern	_OSCTUNE
	extern	_PIE1
	extern	_PIR1
	extern	_IPR1
	extern	_PIE2
	extern	_PIR2
	extern	_IPR2
	extern	_EECON1
	extern	_EECON2
	extern	_EEDATA
	extern	_EEADR
	extern	_RCSTA
	extern	_TXSTA
	extern	_TXREG
	extern	_RCREG
	extern	_SPBRG
	extern	_SPBRGH
	extern	_T3CON
	extern	_TMR3
	extern	_TMR3L
	extern	_TMR3H
	extern	_CMCON
	extern	_CVRCON
	extern	_ECCP1AS
	extern	_ECCPAS
	extern	_ECCP1DEL
	extern	_PWM1CON
	extern	_BAUDCON
	extern	_BAUDCTL
	extern	_CCP2CON
	extern	_CCPR2
	extern	_CCPR2L
	extern	_CCPR2H
	extern	_CCP1CON
	extern	_CCPR1
	extern	_CCPR1L
	extern	_CCPR1H
	extern	_ADCON2
	extern	_ADCON1
	extern	_ADCON0
	extern	_ADRES
	extern	_ADRESL
	extern	_ADRESH
	extern	_SSPCON2
	extern	_SSPCON1
	extern	_SSPSTAT
	extern	_SSPADD
	extern	_SSPBUF
	extern	_T2CON
	extern	_PR2
	extern	_TMR2
	extern	_T1CON
	extern	_TMR1
	extern	_TMR1L
	extern	_TMR1H
	extern	_RCON
	extern	_WDTCON
	extern	_HLVDCON
	extern	_LVDCON
	extern	_OSCCON
	extern	_T0CON
	extern	_TMR0
	extern	_TMR0L
	extern	_TMR0H
	extern	_STATUS
	extern	_FSR2L
	extern	_FSR2H
	extern	_PLUSW2
	extern	_PREINC2
	extern	_POSTDEC2
	extern	_POSTINC2
	extern	_INDF2
	extern	_BSR
	extern	_FSR1L
	extern	_FSR1H
	extern	_PLUSW1
	extern	_PREINC1
	extern	_POSTDEC1
	extern	_POSTINC1
	extern	_INDF1
	extern	_WREG
	extern	_FSR0L
	extern	_FSR0H
	extern	_PLUSW0
	extern	_PREINC0
	extern	_POSTDEC0
	extern	_POSTINC0
	extern	_INDF0
	extern	_INTCON3
	extern	_INTCON2
	extern	_INTCON
	extern	_PROD
	extern	_PRODL
	extern	_PRODH
	extern	_TABLAT
	extern	_TBLPTR
	extern	_TBLPTRL
	extern	_TBLPTRH
	extern	_TBLPTRU
	extern	_PC
	extern	_PCL
	extern	_PCLATH
	extern	_PCLATU
	extern	_STKPTR
	extern	_TOS
	extern	_TOSL
	extern	_TOSH
	extern	_TOSU
	extern	_rand
	extern	__mulint
	extern	__modslong

;--------------------------------------------------------
;	Equates to used internal registers
;--------------------------------------------------------
STATUS	equ	0xfd8
PCL	equ	0xff9
PCLATH	equ	0xffa
PCLATU	equ	0xffb
WREG	equ	0xfe8
TBLPTRL	equ	0xff6
TBLPTRH	equ	0xff7
TBLPTRU	equ	0xff8
TABLAT	equ	0xff5
FSR0L	equ	0xfe9
FSR0H	equ	0xfea
FSR1L	equ	0xfe1
FSR2L	equ	0xfd9
INDF0	equ	0xfef
POSTINC1	equ	0xfe6
POSTDEC1	equ	0xfe5
PREINC1	equ	0xfe4
PLUSW2	equ	0xfdb
PRODL	equ	0xff3
PRODH	equ	0xff4


; Internal registers
.registers	udata_ovr	0x0000
r0x00	res	1
r0x01	res	1
r0x02	res	1
r0x03	res	1
r0x04	res	1
r0x05	res	1
r0x06	res	1
r0x07	res	1
r0x08	res	1
r0x09	res	1
r0x0a	res	1
r0x0b	res	1
r0x0c	res	1
r0x0d	res	1
r0x0e	res	1

udata_main_0	udata
_pointer	res	1

udata_main_1	udata
_i	res	1

udata_main_2	udata
_j	res	1

udata_main_3	udata
_redData	res	27

udata_main_4	udata
_greenData	res	27

udata_main_5	udata
_blueData	res	27

udata_main_6	udata
_workingVar	res	4

udata_main_7	udata
_k	res	1

udata_main_8	udata
_l	res	1

;--------------------------------------------------------
; interrupt vector
;--------------------------------------------------------

;--------------------------------------------------------
; global & static initialisations
;--------------------------------------------------------
; I code from now on!
; ; Starting pCode block
S_main__main	code
_main:
;	.line	234; main.c	OSCCON=0x72;
	MOVLW	0x72
	MOVWF	_OSCCON
;	.line	235; main.c	TRISA=0x00;
	CLRF	_TRISA
;	.line	236; main.c	TRISB=0x00;
	CLRF	_TRISB
;	.line	237; main.c	TRISC=0x00;
	CLRF	_TRISC
;	.line	239; main.c	allOff();
	CALL	_allOff
_00440_DS_:
;	.line	242; main.c	switch(rand()%(5)) {
	CALL	_rand
	MOVWF	r0x00
	MOVFF	PRODL, r0x01
	MOVFF	PRODH, r0x02
	MOVFF	FSR0L, r0x03
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x05
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	MOVF	r0x01, W
	MOVWF	POSTDEC1
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	CALL	__modslong
	MOVWF	r0x00
	MOVFF	PRODL, r0x01
	MOVFF	PRODH, r0x02
	MOVFF	FSR0L, r0x03
	MOVLW	0x08
	ADDWF	FSR1L, F
	BSF	STATUS, 0
	BTFSS	r0x03, 7
	BCF	STATUS, 0
	BC	_00440_DS_
	MOVF	r0x03, W
	ADDLW	0x80
	ADDLW	0x80
	BNZ	_00453_DS_
	MOVLW	0x00
	SUBWF	r0x02, W
	BNZ	_00453_DS_
	MOVLW	0x00
	SUBWF	r0x01, W
	BNZ	_00453_DS_
	MOVLW	0x05
	SUBWF	r0x00, W
_00453_DS_:
	BC	_00440_DS_
	CLRF	PCLATH
	CLRF	PCLATU
	RLCF	r0x00, W
	RLCF	PCLATH, F
	RLCF	WREG, W
	RLCF	PCLATH, F
	ANDLW	0xfc
	ADDLW	LOW(_00454_DS_)
	MOVWF	POSTDEC1
	MOVLW	HIGH(_00454_DS_)
	ADDWFC	PCLATH, F
	MOVLW	UPPER(_00454_DS_)
	ADDWFC	PCLATU, F
	MOVF	PREINC1, W
	MOVWF	PCL
_00454_DS_:
	GOTO	_00433_DS_
	GOTO	_00434_DS_
	GOTO	_00435_DS_
	GOTO	_00436_DS_
	GOTO	_00437_DS_
_00433_DS_:
;	.line	243; main.c	case 0: randomPixle(75); break;
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x4b
	MOVWF	POSTDEC1
	CALL	_randomPixle
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
	BRA	_00440_DS_
_00434_DS_:
;	.line	244; main.c	case 1: helixGreen(4); break;
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x04
	MOVWF	POSTDEC1
	CALL	_helixGreen
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
	BRA	_00440_DS_
_00435_DS_:
;	.line	245; main.c	case 2: rgbUpDown(2); break;
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x02
	MOVWF	POSTDEC1
	CALL	_rgbUpDown
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
	BRA	_00440_DS_
_00436_DS_:
;	.line	246; main.c	case 3: usaFlash(6); break;
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x06
	MOVWF	POSTDEC1
	CALL	_usaFlash
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
	BRA	_00440_DS_
_00437_DS_:
;	.line	247; main.c	case 4: snake(8); break;
	MOVLW	0x08
	MOVWF	POSTDEC1
	CALL	_snake
	MOVF	POSTINC1, F
;	.line	248; main.c	}
	BRA	_00440_DS_
	RETURN	

; ; Starting pCode block
S_main__snake	code
_snake:
;	.line	184; main.c	void snake(char speed) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
;	.line	185; main.c	renderFrame(0000000001, 0, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	186; main.c	renderFrame(0, 0000000003, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	187; main.c	renderFrame(0000000007, 0, 0000000007, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	189; main.c	renderFrame(0, 0, 0000000047, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x27
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	190; main.c	renderFrame(0, 0000000067, 0000000067, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x37
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x37
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	191; main.c	renderFrame(0000000077, 0, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x3f
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	193; main.c	renderFrame(0000000177, 0000000177, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x7f
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x7f
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	194; main.c	renderFrame(0, 0, 0000000377, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	195; main.c	renderFrame(0000000777, 0, 0000000777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	197; main.c	renderFrame(0000400777, 0000400777, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x02
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x02
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	198; main.c	renderFrame(0, 0, 0000600777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	199; main.c	renderFrame(0000700777, 0, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0x81
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	201; main.c	renderFrame(0, 0, 0000710777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0x91
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	202; main.c	renderFrame(0000730777, 0000730777, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xb1
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xb1
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	203; main.c	renderFrame(0, 0, 0000770777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xf1
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	205; main.c	renderFrame(0000774777, 0, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xf9
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	206; main.c	renderFrame(0000776777, 0, 0000776777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xfd
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xfd
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	207; main.c	renderFrame(0, 0000777777, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	209; main.c	renderFrame(0, 0, 0001777777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	210; main.c	renderFrame(0, 0003777777, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x0f
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	211; main.c	renderFrame(0007777777, 0, 0007777777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x1f
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x1f
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	213; main.c	renderFrame(0, 0047777777, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x9f
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	214; main.c	renderFrame(0, 0, 0067777777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0xdf
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	215; main.c	renderFrame(0077777777, 0, 0077777777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	217; main.c	renderFrame(0177777777, 0, 0177777777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	218; main.c	renderFrame(0, 0377777777, 0, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	219; main.c	renderFrame(0, 0, 0777777777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	221; main.c	allOff();
	CALL	_allOff
;	.line	223; main.c	renderFrame(0777777777, 0777777777, 0777777777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	224; main.c	allOff(); delay_ms(100);
	CALL	_allOff
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x64
	MOVWF	POSTDEC1
	CALL	_delay_ms
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
;	.line	225; main.c	renderFrame(0777777777, 0777777777, 0777777777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	226; main.c	allOff(); delay_ms(100);
	CALL	_allOff
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x64
	MOVWF	POSTDEC1
	CALL	_delay_ms
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
;	.line	227; main.c	renderFrame(0777777777, 0777777777, 0777777777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	228; main.c	allOff(); delay_ms(100);
	CALL	_allOff
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x64
	MOVWF	POSTDEC1
	CALL	_delay_ms
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
;	.line	229; main.c	renderFrame(0777777777, 0777777777, 0777777777, speed);
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
;	.line	230; main.c	allOff(); delay_ms(100);
	CALL	_allOff
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x64
	MOVWF	POSTDEC1
	CALL	_delay_ms
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__usaFlash	code
_usaFlash:
;	.line	176; main.c	void usaFlash(int count) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
	MOVLW	0x03
	MOVFF	PLUSW2, r0x01
_00411_DS_:
;	.line	177; main.c	while(count>0) {  //red white and blue
	MOVF	r0x01, W
	ADDLW	0x80
	ADDLW	0x80
	BNZ	_00423_DS_
	MOVLW	0x01
	SUBWF	r0x00, W
_00423_DS_:
	BNC	_00414_DS_
;	.line	178; main.c	renderFrame(0000777777, 0000777000, 0777777000, 20); allOff();
	MOVLW	0x14
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xfe
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xfe
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	179; main.c	delay_ms(250);
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0xfa
	MOVWF	POSTDEC1
	CALL	_delay_ms
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
;	.line	180; main.c	count--;
	MOVLW	0xff
	ADDWF	r0x00, F
	ADDWFC	r0x01, F
	BRA	_00411_DS_
_00414_DS_:
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__rgbUpDown	code
_rgbUpDown:
;	.line	152; main.c	void rgbUpDown(int count) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
	MOVLW	0x03
	MOVFF	PLUSW2, r0x01
_00367_DS_:
;	.line	153; main.c	while(count>0) {  //up down rgb
	MOVF	r0x01, W
	ADDLW	0x80
	ADDLW	0x80
	BNZ	_00403_DS_
	MOVLW	0x01
	SUBWF	r0x00, W
_00403_DS_:
	BTFSS	STATUS, 0
	BRA	_00376_DS_
	BANKSEL	_l
;	.line	154; main.c	for(l = 0; l < 2; l++) {
	CLRF	_l, B
_00370_DS_:
;	.line	155; main.c	renderFrame(0000000777, 0, 0, 8); allOff();  //uses 36 Byte of ROM
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	156; main.c	renderFrame(0000777000, 0, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xfe
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	157; main.c	renderFrame(0777000000, 0, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xfc
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	158; main.c	renderFrame(0000777000, 0, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xfe
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
	BANKSEL	_l
;	.line	154; main.c	for(l = 0; l < 2; l++) {
	INCF	_l, F, B
	MOVLW	0x02
	BANKSEL	_l
	SUBWF	_l, W, B
	BTFSS	STATUS, 0
	BRA	_00370_DS_
	BANKSEL	_l
;	.line	160; main.c	for(l = 0; l < 2; l++) {
	CLRF	_l, B
_00372_DS_:
;	.line	161; main.c	renderFrame(0, 0000000777, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	162; main.c	renderFrame(0, 0000777000, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xfe
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	163; main.c	renderFrame(0, 0777000000, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xfc
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	164; main.c	renderFrame(0, 0000777000, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xfe
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
	BANKSEL	_l
;	.line	160; main.c	for(l = 0; l < 2; l++) {
	INCF	_l, F, B
	MOVLW	0x02
	BANKSEL	_l
	SUBWF	_l, W, B
	BTFSS	STATUS, 0
	BRA	_00372_DS_
	BANKSEL	_l
;	.line	166; main.c	for(l = 0; l < 2; l++) {
	CLRF	_l, B
_00374_DS_:
;	.line	167; main.c	renderFrame(0, 0, 0000000777, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0xff
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	168; main.c	renderFrame(0, 0, 0000777000, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xfe
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	169; main.c	renderFrame(0, 0, 0777000000, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x07
	MOVWF	POSTDEC1
	MOVLW	0xfc
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	170; main.c	renderFrame(0, 0, 0000777000, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0xfe
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
	BANKSEL	_l
;	.line	166; main.c	for(l = 0; l < 2; l++) {
	INCF	_l, F, B
	MOVLW	0x02
	BANKSEL	_l
	SUBWF	_l, W, B
	BTFSS	STATUS, 0
	BRA	_00374_DS_
;	.line	172; main.c	count--;
	MOVLW	0xff
	ADDWF	r0x00, F
	ADDWFC	r0x01, F
	BRA	_00367_DS_
_00376_DS_:
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__helixGreen	code
_helixGreen:
;	.line	138; main.c	void helixGreen(int count) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
	MOVLW	0x03
	MOVFF	PLUSW2, r0x01
_00347_DS_:
;	.line	139; main.c	while(count>0) {  //helix green
	MOVF	r0x01, W
	ADDLW	0x80
	ADDLW	0x80
	BNZ	_00359_DS_
	MOVLW	0x01
	SUBWF	r0x00, W
_00359_DS_:
	BTFSS	STATUS, 0
	BRA	_00350_DS_
;	.line	140; main.c	renderFrame(0, 0100200400, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	141; main.c	renderFrame(0, 0010100200, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x20
	MOVWF	POSTDEC1
	MOVLW	0x80
	MOVWF	POSTDEC1
	MOVLW	0x80
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	142; main.c	renderFrame(0, 0001010100, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x04
	MOVWF	POSTDEC1
	MOVLW	0x10
	MOVWF	POSTDEC1
	MOVLW	0x40
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	143; main.c	renderFrame(0, 0002001010, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x02
	MOVWF	POSTDEC1
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	144; main.c	renderFrame(0, 0004002001, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x10
	MOVWF	POSTDEC1
	MOVLW	0x04
	MOVWF	POSTDEC1
	MOVLW	0x01
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	145; main.c	renderFrame(0, 0040004002, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x80
	MOVWF	POSTDEC1
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x02
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	146; main.c	renderFrame(0, 0400040004, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x04
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x40
	MOVWF	POSTDEC1
	MOVLW	0x04
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	147; main.c	renderFrame(0, 0200400040, 0, 8); allOff();
	MOVLW	0x08
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x02
	MOVWF	POSTDEC1
	MOVLW	0x02
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x20
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
;	.line	148; main.c	count--;
	MOVLW	0xff
	ADDWF	r0x00, F
	ADDWFC	r0x01, F
	BRA	_00347_DS_
_00350_DS_:
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__randomPixle	code
_randomPixle:
;	.line	127; main.c	void randomPixle(int count) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVFF	r0x02, POSTDEC1
	MOVFF	r0x03, POSTDEC1
	MOVFF	r0x04, POSTDEC1
	MOVFF	r0x05, POSTDEC1
	MOVFF	r0x06, POSTDEC1
	MOVFF	r0x07, POSTDEC1
	MOVFF	r0x08, POSTDEC1
	MOVFF	r0x09, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
	MOVLW	0x03
	MOVFF	PLUSW2, r0x01
_00298_DS_:
;	.line	128; main.c	while(count>0) {
	MOVF	r0x01, W
	ADDLW	0x80
	ADDLW	0x80
	BNZ	_00316_DS_
	MOVLW	0x01
	SUBWF	r0x00, W
_00316_DS_:
	BTFSS	STATUS, 0
	GOTO	_00301_DS_
;	.line	129; main.c	switch(rand()%(3)) {
	CALL	_rand
	MOVWF	r0x02
	MOVFF	PRODL, r0x03
	MOVFF	PRODH, r0x04
	MOVFF	FSR0L, r0x05
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVF	r0x05, W
	MOVWF	POSTDEC1
	MOVF	r0x04, W
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	CALL	__modslong
	MOVWF	r0x02
	MOVFF	PRODL, r0x03
	MOVFF	PRODH, r0x04
	MOVFF	FSR0L, r0x05
	MOVLW	0x08
	ADDWF	FSR1L, F
	BSF	STATUS, 0
	BTFSS	r0x05, 7
	BCF	STATUS, 0
	BTFSC	STATUS, 0
	GOTO	_00297_DS_
	MOVF	r0x05, W
	ADDLW	0x80
	ADDLW	0x80
	BNZ	_00317_DS_
	MOVLW	0x00
	SUBWF	r0x04, W
	BNZ	_00317_DS_
	MOVLW	0x00
	SUBWF	r0x03, W
	BNZ	_00317_DS_
	MOVLW	0x03
	SUBWF	r0x02, W
_00317_DS_:
	BTFSC	STATUS, 0
	GOTO	_00297_DS_
	CLRF	PCLATH
	CLRF	PCLATU
	RLCF	r0x02, W
	RLCF	PCLATH, F
	RLCF	WREG, W
	RLCF	PCLATH, F
	ANDLW	0xfc
	ADDLW	LOW(_00318_DS_)
	MOVWF	POSTDEC1
	MOVLW	HIGH(_00318_DS_)
	ADDWFC	PCLATH, F
	MOVLW	UPPER(_00318_DS_)
	ADDWFC	PCLATU, F
	MOVF	PREINC1, W
	MOVWF	PCL
_00318_DS_:
	GOTO	_00294_DS_
	GOTO	_00295_DS_
	GOTO	_00296_DS_
_00294_DS_:
;	.line	130; main.c	case 0: renderFrame(0400000000>>(rand()%27), 0400000000>>(rand()%27), 0, 3); allOff(); break;
	CALL	_rand
	MOVWF	r0x02
	MOVFF	PRODL, r0x03
	MOVFF	PRODH, r0x04
	MOVFF	FSR0L, r0x05
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x1b
	MOVWF	POSTDEC1
	MOVF	r0x05, W
	MOVWF	POSTDEC1
	MOVF	r0x04, W
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	CALL	__modslong
	MOVWF	r0x02
	MOVFF	PRODL, r0x03
	MOVFF	PRODH, r0x04
	MOVFF	FSR0L, r0x05
	MOVLW	0x08
	ADDWF	FSR1L, F
	MOVF	r0x02, W
	MOVWF	FSR0L
	MOVLW	0x00
	MOVWF	r0x02
	MOVLW	0x00
	MOVWF	r0x03
	MOVLW	0x00
	MOVWF	r0x04
	MOVLW	0x04
	MOVWF	r0x05
	MOVF	FSR0L, W
	BZ	_00319_DS_
	BN	_00322_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00320_DS_:
	BTFSC	r0x05, 7
	BSF	STATUS, 0
	RRCF	r0x05, F
	RRCF	r0x04, F
	RRCF	r0x03, F
	RRCF	r0x02, F
	ADDLW	0x01
	BNC	_00320_DS_
	BRA	_00319_DS_
_00322_DS_:
	BCF	STATUS, 0
_00321_DS_:
	RLCF	r0x02, F
	RLCF	r0x03, F
	RLCF	r0x04, F
	RLCF	r0x05, F
	ADDLW	0x01
	BNC	_00321_DS_
_00319_DS_:
	CALL	_rand
	MOVWF	r0x06
	MOVFF	PRODL, r0x07
	MOVFF	PRODH, r0x08
	MOVFF	FSR0L, r0x09
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x1b
	MOVWF	POSTDEC1
	MOVF	r0x09, W
	MOVWF	POSTDEC1
	MOVF	r0x08, W
	MOVWF	POSTDEC1
	MOVF	r0x07, W
	MOVWF	POSTDEC1
	MOVF	r0x06, W
	MOVWF	POSTDEC1
	CALL	__modslong
	MOVWF	r0x06
	MOVFF	PRODL, r0x07
	MOVFF	PRODH, r0x08
	MOVFF	FSR0L, r0x09
	MOVLW	0x08
	ADDWF	FSR1L, F
	MOVF	r0x06, W
	MOVWF	FSR0L
	MOVLW	0x00
	MOVWF	r0x06
	MOVLW	0x00
	MOVWF	r0x07
	MOVLW	0x00
	MOVWF	r0x08
	MOVLW	0x04
	MOVWF	r0x09
	MOVF	FSR0L, W
	BZ	_00323_DS_
	BN	_00326_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00324_DS_:
	BTFSC	r0x09, 7
	BSF	STATUS, 0
	RRCF	r0x09, F
	RRCF	r0x08, F
	RRCF	r0x07, F
	RRCF	r0x06, F
	ADDLW	0x01
	BNC	_00324_DS_
	BRA	_00323_DS_
_00326_DS_:
	BCF	STATUS, 0
_00325_DS_:
	RLCF	r0x06, F
	RLCF	r0x07, F
	RLCF	r0x08, F
	RLCF	r0x09, F
	ADDLW	0x01
	BNC	_00325_DS_
_00323_DS_:
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVF	r0x09, W
	MOVWF	POSTDEC1
	MOVF	r0x08, W
	MOVWF	POSTDEC1
	MOVF	r0x07, W
	MOVWF	POSTDEC1
	MOVF	r0x06, W
	MOVWF	POSTDEC1
	MOVF	r0x05, W
	MOVWF	POSTDEC1
	MOVF	r0x04, W
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
	BRA	_00297_DS_
_00295_DS_:
;	.line	131; main.c	case 1: renderFrame(0, 0400000000>>(rand()%27), 0400000000>>(rand()%27), 3); allOff(); break;
	CALL	_rand
	MOVWF	r0x02
	MOVFF	PRODL, r0x03
	MOVFF	PRODH, r0x04
	MOVFF	FSR0L, r0x05
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x1b
	MOVWF	POSTDEC1
	MOVF	r0x05, W
	MOVWF	POSTDEC1
	MOVF	r0x04, W
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	CALL	__modslong
	MOVWF	r0x02
	MOVFF	PRODL, r0x03
	MOVFF	PRODH, r0x04
	MOVFF	FSR0L, r0x05
	MOVLW	0x08
	ADDWF	FSR1L, F
	MOVF	r0x02, W
	MOVWF	FSR0L
	MOVLW	0x00
	MOVWF	r0x02
	MOVLW	0x00
	MOVWF	r0x03
	MOVLW	0x00
	MOVWF	r0x04
	MOVLW	0x04
	MOVWF	r0x05
	MOVF	FSR0L, W
	BZ	_00327_DS_
	BN	_00330_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00328_DS_:
	BTFSC	r0x05, 7
	BSF	STATUS, 0
	RRCF	r0x05, F
	RRCF	r0x04, F
	RRCF	r0x03, F
	RRCF	r0x02, F
	ADDLW	0x01
	BNC	_00328_DS_
	BRA	_00327_DS_
_00330_DS_:
	BCF	STATUS, 0
_00329_DS_:
	RLCF	r0x02, F
	RLCF	r0x03, F
	RLCF	r0x04, F
	RLCF	r0x05, F
	ADDLW	0x01
	BNC	_00329_DS_
_00327_DS_:
	CALL	_rand
	MOVWF	r0x06
	MOVFF	PRODL, r0x07
	MOVFF	PRODH, r0x08
	MOVFF	FSR0L, r0x09
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x1b
	MOVWF	POSTDEC1
	MOVF	r0x09, W
	MOVWF	POSTDEC1
	MOVF	r0x08, W
	MOVWF	POSTDEC1
	MOVF	r0x07, W
	MOVWF	POSTDEC1
	MOVF	r0x06, W
	MOVWF	POSTDEC1
	CALL	__modslong
	MOVWF	r0x06
	MOVFF	PRODL, r0x07
	MOVFF	PRODH, r0x08
	MOVFF	FSR0L, r0x09
	MOVLW	0x08
	ADDWF	FSR1L, F
	MOVF	r0x06, W
	MOVWF	FSR0L
	MOVLW	0x00
	MOVWF	r0x06
	MOVLW	0x00
	MOVWF	r0x07
	MOVLW	0x00
	MOVWF	r0x08
	MOVLW	0x04
	MOVWF	r0x09
	MOVF	FSR0L, W
	BZ	_00331_DS_
	BN	_00334_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00332_DS_:
	BTFSC	r0x09, 7
	BSF	STATUS, 0
	RRCF	r0x09, F
	RRCF	r0x08, F
	RRCF	r0x07, F
	RRCF	r0x06, F
	ADDLW	0x01
	BNC	_00332_DS_
	BRA	_00331_DS_
_00334_DS_:
	BCF	STATUS, 0
_00333_DS_:
	RLCF	r0x06, F
	RLCF	r0x07, F
	RLCF	r0x08, F
	RLCF	r0x09, F
	ADDLW	0x01
	BNC	_00333_DS_
_00331_DS_:
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVF	r0x09, W
	MOVWF	POSTDEC1
	MOVF	r0x08, W
	MOVWF	POSTDEC1
	MOVF	r0x07, W
	MOVWF	POSTDEC1
	MOVF	r0x06, W
	MOVWF	POSTDEC1
	MOVF	r0x05, W
	MOVWF	POSTDEC1
	MOVF	r0x04, W
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
	BRA	_00297_DS_
_00296_DS_:
;	.line	132; main.c	case 2: renderFrame(0400000000>>(rand()%27), 0, 0400000000>>(rand()%27), 3); allOff(); break;
	CALL	_rand
	MOVWF	r0x02
	MOVFF	PRODL, r0x03
	MOVFF	PRODH, r0x04
	MOVFF	FSR0L, r0x05
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x1b
	MOVWF	POSTDEC1
	MOVF	r0x05, W
	MOVWF	POSTDEC1
	MOVF	r0x04, W
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	CALL	__modslong
	MOVWF	r0x02
	MOVFF	PRODL, r0x03
	MOVFF	PRODH, r0x04
	MOVFF	FSR0L, r0x05
	MOVLW	0x08
	ADDWF	FSR1L, F
	MOVF	r0x02, W
	MOVWF	FSR0L
	MOVLW	0x00
	MOVWF	r0x02
	MOVLW	0x00
	MOVWF	r0x03
	MOVLW	0x00
	MOVWF	r0x04
	MOVLW	0x04
	MOVWF	r0x05
	MOVF	FSR0L, W
	BZ	_00335_DS_
	BN	_00338_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00336_DS_:
	BTFSC	r0x05, 7
	BSF	STATUS, 0
	RRCF	r0x05, F
	RRCF	r0x04, F
	RRCF	r0x03, F
	RRCF	r0x02, F
	ADDLW	0x01
	BNC	_00336_DS_
	BRA	_00335_DS_
_00338_DS_:
	BCF	STATUS, 0
_00337_DS_:
	RLCF	r0x02, F
	RLCF	r0x03, F
	RLCF	r0x04, F
	RLCF	r0x05, F
	ADDLW	0x01
	BNC	_00337_DS_
_00335_DS_:
	CALL	_rand
	MOVWF	r0x06
	MOVFF	PRODL, r0x07
	MOVFF	PRODH, r0x08
	MOVFF	FSR0L, r0x09
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x1b
	MOVWF	POSTDEC1
	MOVF	r0x09, W
	MOVWF	POSTDEC1
	MOVF	r0x08, W
	MOVWF	POSTDEC1
	MOVF	r0x07, W
	MOVWF	POSTDEC1
	MOVF	r0x06, W
	MOVWF	POSTDEC1
	CALL	__modslong
	MOVWF	r0x06
	MOVFF	PRODL, r0x07
	MOVFF	PRODH, r0x08
	MOVFF	FSR0L, r0x09
	MOVLW	0x08
	ADDWF	FSR1L, F
	MOVF	r0x06, W
	MOVWF	FSR0L
	MOVLW	0x00
	MOVWF	r0x06
	MOVLW	0x00
	MOVWF	r0x07
	MOVLW	0x00
	MOVWF	r0x08
	MOVLW	0x04
	MOVWF	r0x09
	MOVF	FSR0L, W
	BZ	_00339_DS_
	BN	_00342_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00340_DS_:
	BTFSC	r0x09, 7
	BSF	STATUS, 0
	RRCF	r0x09, F
	RRCF	r0x08, F
	RRCF	r0x07, F
	RRCF	r0x06, F
	ADDLW	0x01
	BNC	_00340_DS_
	BRA	_00339_DS_
_00342_DS_:
	BCF	STATUS, 0
_00341_DS_:
	RLCF	r0x06, F
	RLCF	r0x07, F
	RLCF	r0x08, F
	RLCF	r0x09, F
	ADDLW	0x01
	BNC	_00341_DS_
_00339_DS_:
	MOVLW	0x03
	MOVWF	POSTDEC1
	MOVF	r0x09, W
	MOVWF	POSTDEC1
	MOVF	r0x08, W
	MOVWF	POSTDEC1
	MOVF	r0x07, W
	MOVWF	POSTDEC1
	MOVF	r0x06, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVF	r0x05, W
	MOVWF	POSTDEC1
	MOVF	r0x04, W
	MOVWF	POSTDEC1
	MOVF	r0x03, W
	MOVWF	POSTDEC1
	MOVF	r0x02, W
	MOVWF	POSTDEC1
	CALL	_renderFrame
	MOVLW	0x0d
	ADDWF	FSR1L, F
	CALL	_allOff
_00297_DS_:
;	.line	134; main.c	count--;
	MOVLW	0xff
	ADDWF	r0x00, F
	ADDWFC	r0x01, F
	GOTO	_00298_DS_
_00301_DS_:
	MOVFF	PREINC1, r0x09
	MOVFF	PREINC1, r0x08
	MOVFF	PREINC1, r0x07
	MOVFF	PREINC1, r0x06
	MOVFF	PREINC1, r0x05
	MOVFF	PREINC1, r0x04
	MOVFF	PREINC1, r0x03
	MOVFF	PREINC1, r0x02
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__renderFrame	code
_renderFrame:
;	.line	106; main.c	void renderFrame(unsigned long redValues, unsigned long greenValues, unsigned long blueValues, char holdTime) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVFF	r0x02, POSTDEC1
	MOVFF	r0x03, POSTDEC1
	MOVFF	r0x04, POSTDEC1
	MOVFF	r0x05, POSTDEC1
	MOVFF	r0x06, POSTDEC1
	MOVFF	r0x07, POSTDEC1
	MOVFF	r0x08, POSTDEC1
	MOVFF	r0x09, POSTDEC1
	MOVFF	r0x0a, POSTDEC1
	MOVFF	r0x0b, POSTDEC1
	MOVFF	r0x0c, POSTDEC1
	MOVFF	r0x0d, POSTDEC1
	MOVFF	r0x0e, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, _workingVar
	MOVLW	0x03
	MOVFF	PLUSW2, (_workingVar + 1)
	MOVLW	0x04
	MOVFF	PLUSW2, (_workingVar + 2)
	MOVLW	0x05
	MOVFF	PLUSW2, (_workingVar + 3)
	MOVLW	0x06
	MOVFF	PLUSW2, r0x00
	MOVLW	0x07
	MOVFF	PLUSW2, r0x01
	MOVLW	0x08
	MOVFF	PLUSW2, r0x02
	MOVLW	0x09
	MOVFF	PLUSW2, r0x03
	MOVLW	0x0a
	MOVFF	PLUSW2, r0x04
	MOVLW	0x0b
	MOVFF	PLUSW2, r0x05
	MOVLW	0x0c
	MOVFF	PLUSW2, r0x06
	MOVLW	0x0d
	MOVFF	PLUSW2, r0x07
	MOVLW	0x0e
	MOVFF	PLUSW2, r0x08
	BANKSEL	_i
;	.line	108; main.c	for(i = 0; i <= 26; i++) {
	CLRF	_i, B
_00242_DS_:
;	.line	109; main.c	redData[i] = (workingVar >> i) & 1;
	MOVLW	LOW(_redData)
	BANKSEL	_i
	ADDWF	_i, W, B
	MOVWF	r0x09
	CLRF	r0x0a
	MOVLW	HIGH(_redData)
	ADDWFC	r0x0a, F
	MOVFF	_workingVar, r0x0b
	MOVFF	(_workingVar + 1), r0x0c
	MOVFF	(_workingVar + 2), r0x0d
	MOVFF	(_workingVar + 3), r0x0e
	BANKSEL	_i
	MOVF	_i, W, B
	BZ	_00277_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00278_DS_:
	RRCF	r0x0e, F
	RRCF	r0x0d, F
	RRCF	r0x0c, F
	RRCF	r0x0b, F
	ADDLW	0x01
	BNC	_00278_DS_
_00277_DS_:
	MOVLW	0x01
	ANDWF	r0x0b, F
	CLRF	r0x0c
	CLRF	r0x0d
	CLRF	r0x0e
	MOVFF	r0x09, FSR0L
	MOVFF	r0x0a, FSR0H
	MOVFF	r0x0b, INDF0
	BANKSEL	_i
;	.line	108; main.c	for(i = 0; i <= 26; i++) {
	INCF	_i, F, B
	MOVLW	0x1b
	BANKSEL	_i
	SUBWF	_i, W, B
	BNC	_00242_DS_
;	.line	112; main.c	workingVar = greenValues;
	MOVFF	r0x00, _workingVar
	MOVFF	r0x01, (_workingVar + 1)
	MOVFF	r0x02, (_workingVar + 2)
	MOVFF	r0x03, (_workingVar + 3)
	BANKSEL	_i
;	.line	113; main.c	for(i = 0; i <= 26; i++) {
	CLRF	_i, B
_00244_DS_:
;	.line	114; main.c	greenData[i] = (workingVar >> i) & 1;
	MOVLW	LOW(_greenData)
	BANKSEL	_i
	ADDWF	_i, W, B
	MOVWF	r0x00
	CLRF	r0x01
	MOVLW	HIGH(_greenData)
	ADDWFC	r0x01, F
	MOVFF	_workingVar, r0x02
	MOVFF	(_workingVar + 1), r0x03
	MOVFF	(_workingVar + 2), r0x09
	MOVFF	(_workingVar + 3), r0x0a
	BANKSEL	_i
	MOVF	_i, W, B
	BZ	_00281_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00282_DS_:
	RRCF	r0x0a, F
	RRCF	r0x09, F
	RRCF	r0x03, F
	RRCF	r0x02, F
	ADDLW	0x01
	BNC	_00282_DS_
_00281_DS_:
	MOVLW	0x01
	ANDWF	r0x02, F
	CLRF	r0x03
	CLRF	r0x09
	CLRF	r0x0a
	MOVFF	r0x00, FSR0L
	MOVFF	r0x01, FSR0H
	MOVFF	r0x02, INDF0
	BANKSEL	_i
;	.line	113; main.c	for(i = 0; i <= 26; i++) {
	INCF	_i, F, B
	MOVLW	0x1b
	BANKSEL	_i
	SUBWF	_i, W, B
	BNC	_00244_DS_
;	.line	117; main.c	workingVar = blueValues;
	MOVFF	r0x04, _workingVar
	MOVFF	r0x05, (_workingVar + 1)
	MOVFF	r0x06, (_workingVar + 2)
	MOVFF	r0x07, (_workingVar + 3)
	BANKSEL	_i
;	.line	118; main.c	for(i = 0; i <= 26; i++) {
	CLRF	_i, B
_00246_DS_:
;	.line	119; main.c	blueData[i] = (workingVar >> i) & 1;
	MOVLW	LOW(_blueData)
	BANKSEL	_i
	ADDWF	_i, W, B
	MOVWF	r0x00
	CLRF	r0x01
	MOVLW	HIGH(_blueData)
	ADDWFC	r0x01, F
	MOVFF	_workingVar, r0x02
	MOVFF	(_workingVar + 1), r0x03
	MOVFF	(_workingVar + 2), r0x04
	MOVFF	(_workingVar + 3), r0x05
	BANKSEL	_i
	MOVF	_i, W, B
	BZ	_00285_DS_
	NEGF	WREG
	BCF	STATUS, 0
_00286_DS_:
	RRCF	r0x05, F
	RRCF	r0x04, F
	RRCF	r0x03, F
	RRCF	r0x02, F
	ADDLW	0x01
	BNC	_00286_DS_
_00285_DS_:
	MOVLW	0x01
	ANDWF	r0x02, F
	CLRF	r0x03
	CLRF	r0x04
	CLRF	r0x05
	MOVFF	r0x00, FSR0L
	MOVFF	r0x01, FSR0H
	MOVFF	r0x02, INDF0
	BANKSEL	_i
;	.line	118; main.c	for(i = 0; i <= 26; i++) {
	INCF	_i, F, B
	MOVLW	0x1b
	BANKSEL	_i
	SUBWF	_i, W, B
	BNC	_00246_DS_
	BANKSEL	_k
;	.line	122; main.c	for(k = 0; k < holdTime; k++) {
	CLRF	_k, B
_00249_DS_:
	MOVF	r0x08, W
	BANKSEL	_k
	SUBWF	_k, W, B
	BC	_00251_DS_
;	.line	123; main.c	displayFrame();
	CALL	_displayFrame
	BANKSEL	_k
;	.line	122; main.c	for(k = 0; k < holdTime; k++) {
	INCF	_k, F, B
	BRA	_00249_DS_
_00251_DS_:
	MOVFF	PREINC1, r0x0e
	MOVFF	PREINC1, r0x0d
	MOVFF	PREINC1, r0x0c
	MOVFF	PREINC1, r0x0b
	MOVFF	PREINC1, r0x0a
	MOVFF	PREINC1, r0x09
	MOVFF	PREINC1, r0x08
	MOVFF	PREINC1, r0x07
	MOVFF	PREINC1, r0x06
	MOVFF	PREINC1, r0x05
	MOVFF	PREINC1, r0x04
	MOVFF	PREINC1, r0x03
	MOVFF	PREINC1, r0x02
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__displayFrame	code
_displayFrame:
;	.line	71; main.c	void displayFrame(void) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	BANKSEL	_pointer
;	.line	72; main.c	pointer = 0;
	CLRF	_pointer, B
	BANKSEL	_i
;	.line	73; main.c	for(i = 0; i <= 2; i++) {
	CLRF	_i, B
_00183_DS_:
	BANKSEL	_j
;	.line	74; main.c	for(j = 0; j <= 8; j++) {
	CLRF	_j, B
_00181_DS_:
;	.line	75; main.c	allOff();
	CALL	_allOff
	BANKSEL	_i
;	.line	76; main.c	colorSet(i);
	MOVF	_i, W, B
	MOVWF	POSTDEC1
	CALL	_colorSet
	MOVF	POSTINC1, F
;	.line	77; main.c	columbSet(j, redData[pointer]);
	MOVLW	LOW(_redData)
	BANKSEL	_pointer
	ADDWF	_pointer, W, B
	MOVWF	r0x00
	CLRF	r0x01
	MOVLW	HIGH(_redData)
	ADDWFC	r0x01, F
	MOVFF	r0x00, FSR0L
	MOVFF	r0x01, FSR0H
	MOVFF	INDF0, r0x00
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	BANKSEL	_j
	MOVF	_j, W, B
	MOVWF	POSTDEC1
	CALL	_columbSet
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
;	.line	78; main.c	delay_us(delaySpeed*2);
	MOVLW	LOW(_delaySpeed)
	MOVWF	TBLPTRL
	MOVLW	HIGH(_delaySpeed)
	MOVWF	TBLPTRH
	MOVLW	UPPER(_delaySpeed)
	MOVWF	TBLPTRU
	TBLRD*+	
	MOVFF	TABLAT, r0x00
	TBLRD*+	
	MOVFF	TABLAT, r0x01
	MOVF	r0x01, W
	MOVWF	POSTDEC1
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x02
	MOVWF	POSTDEC1
	CALL	__mulint
	MOVWF	r0x00
	MOVFF	PRODL, r0x01
	MOVLW	0x04
	ADDWF	FSR1L, F
	MOVF	r0x01, W
	MOVWF	POSTDEC1
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	CALL	_delay_us
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
	BANKSEL	_pointer
;	.line	79; main.c	pointer++;
	INCF	_pointer, F, B
	BANKSEL	_j
;	.line	74; main.c	for(j = 0; j <= 8; j++) {
	INCF	_j, F, B
	MOVLW	0x09
	BANKSEL	_j
	SUBWF	_j, W, B
	BTFSS	STATUS, 0
	BRA	_00181_DS_
	BANKSEL	_i
;	.line	73; main.c	for(i = 0; i <= 2; i++) {
	INCF	_i, F, B
	MOVLW	0x03
	BANKSEL	_i
	SUBWF	_i, W, B
	BTFSS	STATUS, 0
	BRA	_00183_DS_
	BANKSEL	_pointer
;	.line	83; main.c	pointer = 0;
	CLRF	_pointer, B
;	.line	84; main.c	for(i = 3; i <= 5; i++) {
	MOVLW	0x03
	BANKSEL	_i
	MOVWF	_i, B
_00187_DS_:
	BANKSEL	_j
;	.line	85; main.c	for(j = 0; j <= 8; j++) {
	CLRF	_j, B
_00185_DS_:
;	.line	86; main.c	allOff();
	CALL	_allOff
	BANKSEL	_i
;	.line	87; main.c	colorSet(i);
	MOVF	_i, W, B
	MOVWF	POSTDEC1
	CALL	_colorSet
	MOVF	POSTINC1, F
;	.line	88; main.c	columbSet(j, greenData[pointer]);
	MOVLW	LOW(_greenData)
	BANKSEL	_pointer
	ADDWF	_pointer, W, B
	MOVWF	r0x00
	CLRF	r0x01
	MOVLW	HIGH(_greenData)
	ADDWFC	r0x01, F
	MOVFF	r0x00, FSR0L
	MOVFF	r0x01, FSR0H
	MOVFF	INDF0, r0x00
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	BANKSEL	_j
	MOVF	_j, W, B
	MOVWF	POSTDEC1
	CALL	_columbSet
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
;	.line	89; main.c	delay_us(delaySpeed);
	MOVLW	LOW(_delaySpeed)
	MOVWF	TBLPTRL
	MOVLW	HIGH(_delaySpeed)
	MOVWF	TBLPTRH
	MOVLW	UPPER(_delaySpeed)
	MOVWF	TBLPTRU
	TBLRD*+	
	MOVFF	TABLAT, r0x00
	TBLRD*+	
	MOVFF	TABLAT, r0x01
	MOVF	r0x01, W
	MOVWF	POSTDEC1
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	CALL	_delay_us
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
	BANKSEL	_pointer
;	.line	90; main.c	pointer++;
	INCF	_pointer, F, B
	BANKSEL	_j
;	.line	85; main.c	for(j = 0; j <= 8; j++) {
	INCF	_j, F, B
	MOVLW	0x09
	BANKSEL	_j
	SUBWF	_j, W, B
	BTFSS	STATUS, 0
	BRA	_00185_DS_
	BANKSEL	_i
;	.line	84; main.c	for(i = 3; i <= 5; i++) {
	INCF	_i, F, B
	MOVLW	0x06
	BANKSEL	_i
	SUBWF	_i, W, B
	BTFSS	STATUS, 0
	BRA	_00187_DS_
	BANKSEL	_pointer
;	.line	94; main.c	pointer = 0;
	CLRF	_pointer, B
;	.line	95; main.c	for(i = 6; i <= 8; i++) {
	MOVLW	0x06
	BANKSEL	_i
	MOVWF	_i, B
_00191_DS_:
	BANKSEL	_j
;	.line	96; main.c	for(j = 0; j <= 8; j++) {
	CLRF	_j, B
_00189_DS_:
;	.line	97; main.c	allOff();
	CALL	_allOff
	BANKSEL	_i
;	.line	98; main.c	colorSet(i);
	MOVF	_i, W, B
	MOVWF	POSTDEC1
	CALL	_colorSet
	MOVF	POSTINC1, F
;	.line	99; main.c	columbSet(j, blueData[pointer]);
	MOVLW	LOW(_blueData)
	BANKSEL	_pointer
	ADDWF	_pointer, W, B
	MOVWF	r0x00
	CLRF	r0x01
	MOVLW	HIGH(_blueData)
	ADDWFC	r0x01, F
	MOVFF	r0x00, FSR0L
	MOVFF	r0x01, FSR0H
	MOVFF	INDF0, r0x00
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	BANKSEL	_j
	MOVF	_j, W, B
	MOVWF	POSTDEC1
	CALL	_columbSet
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
;	.line	100; main.c	delay_us(delaySpeed);
	MOVLW	LOW(_delaySpeed)
	MOVWF	TBLPTRL
	MOVLW	HIGH(_delaySpeed)
	MOVWF	TBLPTRH
	MOVLW	UPPER(_delaySpeed)
	MOVWF	TBLPTRU
	TBLRD*+	
	MOVFF	TABLAT, r0x00
	TBLRD*+	
	MOVFF	TABLAT, r0x01
	MOVF	r0x01, W
	MOVWF	POSTDEC1
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	CALL	_delay_us
	MOVF	POSTINC1, F
	MOVF	POSTINC1, F
	BANKSEL	_pointer
;	.line	101; main.c	pointer++;
	INCF	_pointer, F, B
	BANKSEL	_j
;	.line	96; main.c	for(j = 0; j <= 8; j++) {
	INCF	_j, F, B
	MOVLW	0x09
	BANKSEL	_j
	SUBWF	_j, W, B
	BTFSS	STATUS, 0
	BRA	_00189_DS_
	BANKSEL	_i
;	.line	95; main.c	for(i = 6; i <= 8; i++) {
	INCF	_i, F, B
	MOVLW	0x09
	BANKSEL	_i
	SUBWF	_i, W, B
	BTFSS	STATUS, 0
	BRA	_00191_DS_
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__columbSet	code
_columbSet:
;	.line	55; main.c	void columbSet(char columbAddr, char columbData) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
	MOVLW	0x03
	MOVFF	PLUSW2, r0x01
;	.line	56; main.c	if(columbData != 0) {
	MOVF	r0x01, W
	BZ	_00161_DS_
;	.line	57; main.c	switch (columbAddr) {
	MOVLW	0x09
	SUBWF	r0x00, W
	BC	_00161_DS_
	CLRF	PCLATH
	CLRF	PCLATU
	RLCF	r0x00, W
	RLCF	PCLATH, F
	RLCF	WREG, W
	RLCF	PCLATH, F
	ANDLW	0xfc
	ADDLW	LOW(_00170_DS_)
	MOVWF	POSTDEC1
	MOVLW	HIGH(_00170_DS_)
	ADDWFC	PCLATH, F
	MOVLW	UPPER(_00170_DS_)
	ADDWFC	PCLATU, F
	MOVF	PREINC1, W
	MOVWF	PCL
_00170_DS_:
	GOTO	_00149_DS_
	GOTO	_00150_DS_
	GOTO	_00151_DS_
	GOTO	_00152_DS_
	GOTO	_00153_DS_
	GOTO	_00154_DS_
	GOTO	_00155_DS_
	GOTO	_00156_DS_
	GOTO	_00157_DS_
_00149_DS_:
;	.line	58; main.c	case 0: PORTB |= 0x20; break;
	BSF	_PORTB, 5
	BRA	_00161_DS_
_00150_DS_:
;	.line	59; main.c	case 1: PORTB |= 0x10; break;
	BSF	_PORTB, 4
	BRA	_00161_DS_
_00151_DS_:
;	.line	60; main.c	case 2: PORTB |= 0x08; break;
	BSF	_PORTB, 3
	BRA	_00161_DS_
_00152_DS_:
;	.line	61; main.c	case 3: PORTB |= 0x04; break;
	BSF	_PORTB, 2
	BRA	_00161_DS_
_00153_DS_:
;	.line	62; main.c	case 4: PORTB |= 0x02; break;
	BSF	_PORTB, 1
	BRA	_00161_DS_
_00154_DS_:
;	.line	63; main.c	case 5: PORTB |= 0x01; break;
	BSF	_PORTB, 0
	BRA	_00161_DS_
_00155_DS_:
;	.line	64; main.c	case 6: PORTC |= 0x02; break;
	BSF	_PORTC, 1
	BRA	_00161_DS_
_00156_DS_:
;	.line	65; main.c	case 7: PORTC |= 0x08; break;
	BSF	_PORTC, 3
	BRA	_00161_DS_
_00157_DS_:
;	.line	66; main.c	case 8: PORTC |= 0x10; break;
	BSF	_PORTC, 4
_00161_DS_:
;	.line	67; main.c	}
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__colorSet	code
_colorSet:
;	.line	41; main.c	void colorSet(char colorAddr) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
;	.line	42; main.c	switch (colorAddr) {
	MOVLW	0x09
	SUBWF	r0x00, W
	BC	_00138_DS_
	CLRF	PCLATH
	CLRF	PCLATU
	RLCF	r0x00, W
	RLCF	PCLATH, F
	RLCF	WREG, W
	RLCF	PCLATH, F
	ANDLW	0xfc
	ADDLW	LOW(_00144_DS_)
	MOVWF	POSTDEC1
	MOVLW	HIGH(_00144_DS_)
	ADDWFC	PCLATH, F
	MOVLW	UPPER(_00144_DS_)
	ADDWFC	PCLATU, F
	MOVF	PREINC1, W
	MOVWF	PCL
_00144_DS_:
	GOTO	_00128_DS_
	GOTO	_00129_DS_
	GOTO	_00130_DS_
	GOTO	_00131_DS_
	GOTO	_00132_DS_
	GOTO	_00133_DS_
	GOTO	_00134_DS_
	GOTO	_00135_DS_
	GOTO	_00136_DS_
_00128_DS_:
;	.line	43; main.c	case 0: PORTC = 0x00; break;  //layer 0 red
	CLRF	_PORTC
	BRA	_00138_DS_
_00129_DS_:
;	.line	44; main.c	case 1: PORTA = 0xDF; break;  //layer 1 red
	MOVLW	0xdf
	MOVWF	_PORTA
	BRA	_00138_DS_
_00130_DS_:
;	.line	45; main.c	case 2: PORTA = 0xFB; break;  //layer 2 red
	MOVLW	0xfb
	MOVWF	_PORTA
	BRA	_00138_DS_
_00131_DS_:
;	.line	46; main.c	case 3: PORTA = 0xBF; break;  //layer 0 green
	MOVLW	0xbf
	MOVWF	_PORTA
	BRA	_00138_DS_
_00132_DS_:
;	.line	47; main.c	case 4: PORTA = 0xEF; break;  //layer 1 green
	MOVLW	0xef
	MOVWF	_PORTA
	BRA	_00138_DS_
_00133_DS_:
;	.line	48; main.c	case 5: PORTA = 0xFD; break;  //layer 2 green
	MOVLW	0xfd
	MOVWF	_PORTA
	BRA	_00138_DS_
_00134_DS_:
;	.line	49; main.c	case 6: PORTA = 0x7F; break;  //layer 0 blue
	MOVLW	0x7f
	MOVWF	_PORTA
	BRA	_00138_DS_
_00135_DS_:
;	.line	50; main.c	case 7: PORTA = 0xF7; break;  //layer 1 blue
	MOVLW	0xf7
	MOVWF	_PORTA
	BRA	_00138_DS_
_00136_DS_:
;	.line	51; main.c	case 8: PORTA = 0xFE; break;  //layer 2 blue
	MOVLW	0xfe
	MOVWF	_PORTA
_00138_DS_:
;	.line	52; main.c	}
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__allOff	code
_allOff:
;	.line	35; main.c	void allOff(void) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
;	.line	36; main.c	PORTA=0xFF;
	MOVLW	0xff
	MOVWF	_PORTA
;	.line	37; main.c	PORTB=0x00;
	CLRF	_PORTB
;	.line	38; main.c	PORTC=0x01;
	MOVLW	0x01
	MOVWF	_PORTC
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__delay_ms	code
_delay_ms:
;	.line	28; main.c	void delay_ms(uint16_t iterations) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
	MOVLW	0x03
	MOVFF	PLUSW2, r0x01
;	.line	30; main.c	for (i = iterations*100; i > 0; i--) {
	MOVF	r0x01, W
	MOVWF	POSTDEC1
	MOVF	r0x00, W
	MOVWF	POSTDEC1
	MOVLW	0x00
	MOVWF	POSTDEC1
	MOVLW	0x64
	MOVWF	POSTDEC1
	CALL	__mulint
	MOVWF	r0x00
	MOVFF	PRODL, r0x01
	MOVLW	0x04
	ADDWF	FSR1L, F
_00116_DS_:
	MOVF	r0x00, W
	IORWF	r0x01, W
	BZ	_00118_DS_
	nop	
;	.line	30; main.c	for (i = iterations*100; i > 0; i--) {
	MOVLW	0xff
	ADDWF	r0x00, F
	ADDWFC	r0x01, F
	BRA	_00116_DS_
_00118_DS_:
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block
S_main__delay_us	code
_delay_us:
;	.line	21; main.c	void delay_us(uint16_t iterations) {
	MOVFF	FSR2L, POSTDEC1
	MOVFF	FSR1L, FSR2L
	MOVFF	r0x00, POSTDEC1
	MOVFF	r0x01, POSTDEC1
	MOVLW	0x02
	MOVFF	PLUSW2, r0x00
	MOVLW	0x03
	MOVFF	PLUSW2, r0x01
_00107_DS_:
;	.line	23; main.c	for (i = iterations; i > 0; i--) {
	MOVF	r0x00, W
	IORWF	r0x01, W
	BZ	_00109_DS_
	nop	
;	.line	23; main.c	for (i = iterations; i > 0; i--) {
	MOVLW	0xff
	ADDWF	r0x00, F
	ADDWFC	r0x01, F
	BRA	_00107_DS_
_00109_DS_:
	MOVFF	PREINC1, r0x01
	MOVFF	PREINC1, r0x00
	MOVFF	PREINC1, FSR2L
	RETURN	

; ; Starting pCode block for Ival
	code
_delaySpeed:
	DB	0x0a, 0x00


; Statistics:
; code size:	 6636 (0x19ec) bytes ( 5.06%)
;           	 3318 (0x0cf6) words
; udata size:	   90 (0x005a) bytes ( 7.03%)
; access size:	   15 (0x000f) bytes


	end
